/*208383984_315309666*/
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "TrashCan" (
	"TCID"	INTEGER NOT NULL,
	"CreationDate"	DATETIME CHECK(CreationDate<ExpirationDate),
	"ExpirationDate"	DATETIME NOT NULL CHECK(ExpirationDate>CreationDate),
	"RID"	INTEGER NOT NULL,
	PRIMARY KEY("TCID"),
	FOREIGN KEY("RID") REFERENCES "Resident"("RID") ON DELETE SET NULL
);
CREATE TABLE IF NOT EXISTS "Resident" (
	"RID"	INTEGER NOT NULL,
	"FirstName"	VARCHAR NOT NULL,
	"LastName"	VARCHAR,
	"BirthDate"	DATETIME NOT NULL,
	"StreetName"	VARCHAR NOT NULL,
	"Number"	INTEGER,
	"Door"	INTEGER,
	PRIMARY KEY("RID"),
	FOREIGN KEY("StreetName","Door","Number") REFERENCES "Apartment"("StreetName","Door","Number")
);
CREATE TABLE IF NOT EXISTS "Project" (
	"PID"	INTEGER NOT NULL,
	"Name"	VARCHAR NOT NULL,
	"Description"	VARCHAR(20),
	"Budget"	INTEGER NOT NULL CHECK(Budget>=0),
	"Neighborhood"	INTEGER NOT NULL,
	PRIMARY KEY("PID"),
	FOREIGN KEY("Neighborhood") REFERENCES "Neighborhood"("NID") ON UPDATE RESTRICT
);
CREATE TABLE IF NOT EXISTS "ParkingArea" (
	"AID"	INTEGER NOT NULL,
	"Name"	VARCHAR NOT NULL,
	"PricePerHour"	DOUBLE NOT NULL CHECK(PricePerHour<MaxPricePerDay),
	"MaxPricePerDay"	DOUBLE NOT NULL,
	"NID"	INTEGER NOT NULL,
	PRIMARY KEY("AID"),
	FOREIGN KEY("NID") REFERENCES "Neighborhood"("NID") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "OfficialEmployee" (
	"EID"	INTEGER NOT NULL,
	"StartWorkingDate"	DATETIME DEFAULT 'CURRENT_TIMESTAMP',
	"Degree"	VARCHAR NOT NULL,
	"Department"	INTEGER NOT NULL,
	PRIMARY KEY("EID"),
	FOREIGN KEY("EID") REFERENCES "Employee"("EID") ON DELETE CASCADE,
	FOREIGN KEY("Department") REFERENCES "Department"("DID") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "Neighborhood" (
	"NID"	INTEGER NOT NULL,
	"Name"	VARCHAR NOT NULL,
	PRIMARY KEY("NID")
);
CREATE TABLE IF NOT EXISTS "Employee" (
	"EID"	INTEGER NOT NULL,
	"FirstName"	VARCHAR(10) NOT NULL,
	"LastName"	VARCHAR(10) NOT NULL,
	"BirthDate"	DATETIME NOT NULL,
	"StreetName"	VARCHAR NOT NULL,
	"Number"	INTEGER NOT NULL,
	"Door"	INTEGER,
	"City"	VARCHAR NOT NULL,
	PRIMARY KEY("EID")
);
CREATE TABLE IF NOT EXISTS "Department" (
	"DID"	INTEGER NOT NULL,
	"Description"	VARCHAR(20),
	"Name"	VARCHAR NOT NULL,
	"ManagerID"	INTEGER,
	PRIMARY KEY("DID"),
	FOREIGN KEY("ManagerID") REFERENCES "OfficialEmployee"("EID") ON DELETE RESTRICT
);
CREATE TABLE IF NOT EXISTS "ConstructorEmployee" (
	"EID"	INTEGER NOT NULL,
	"CompanyName"	VARCHAR NOT NULL,
	"SalaryPerDay"	Double NOT NULL CHECK(SalaryPerDay>=0),
	PRIMARY KEY("EID"),
	FOREIGN KEY("EID") REFERENCES "Employee"("EID")
);
CREATE TABLE IF NOT EXISTS "CellPhones" (
	"EID"	INTEGER NOT NULL,
	"CellPhone_Number"	VARCHAR NOT NULL UNIQUE,
	FOREIGN KEY("EID") REFERENCES "Employee"("EID"),
	PRIMARY KEY("EID","CellPhone_Number")
);
CREATE TABLE IF NOT EXISTS "Car" (
	"CID"	INTEGER NOT NULL,
	"CreditCard"	INTEGER NOT NULL UNIQUE,
	"ThreeDigits"	INTEGER NOT NULL,
	"ExpirationDate"	DATETIME NOT NULL,
	"ID"	INTEGER NOT NULL UNIQUE,
	"CellPhoneNumber"	VARCHAR,
	PRIMARY KEY("CID")
);
CREATE TABLE IF NOT EXISTS "CarParking" (
	"CID"	INTEGER NOT NULL,
	"StartTime"	DATETIME DEFAULT 'CURRENT TIMESTAMP' CHECK(StartTime<EndTime),
	"EndTime"	DATETIME,
	"AID"	INTEGER,
	"Cost"	DOUBLE,
	PRIMARY KEY("CID","StartTime"),
	FOREIGN KEY("CID") REFERENCES "Car"("CID") ON DELETE CASCADE,
	FOREIGN KEY("AID") REFERENCES "ParkingArea"("AID") ON DELETE SET NULL
);
CREATE TABLE IF NOT EXISTS "ProjectConstructorEmployee" (
	"PID"	INTEGER NOT NULL,
	"EID"	INTEGER NOT NULL,
	"StartWorkingDate"	DATETIME,
	"EndWorkingDate"	DATETIME,
	"JobDescription"	VARCHAR(50),
	PRIMARY KEY("PID","EID"),
	FOREIGN KEY("PID") REFERENCES "Project"("PID"),
	FOREIGN KEY("EID") REFERENCES "ConstructorEmployee"("EID") ON DELETE RESTRICT
);
CREATE TABLE IF NOT EXISTS "Apartment" (
	"StreetName"	VARCHAR(20) NOT NULL,
	"Number"	INTEGER NOT NULL,
	"Door"	INTEGER,
	"Type"	VARCHAR,
	"SizeSquareMeter"	INTEGER,
	"NID"	INTEGER,
	PRIMARY KEY("StreetName","Number","Door"),
	FOREIGN KEY("NID") REFERENCES "Neighborhood"("NID") ON UPDATE RESTRICT
);
COMMIT;
